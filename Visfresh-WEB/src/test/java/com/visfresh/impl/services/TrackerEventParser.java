/**
 *
 */
package com.visfresh.impl.services;

import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.visfresh.entities.Company;
import com.visfresh.entities.Device;
import com.visfresh.entities.Shipment;
import com.visfresh.entities.ShipmentStatus;
import com.visfresh.entities.TrackerEvent;
import com.visfresh.utils.StringUtils;


/**
 * @author Vyacheslav Soldatov <vyacheslav.soldatov@inbox.ru>
 *
 */
public abstract class TrackerEventParser {
    private final Map<String, Device> devices = new HashMap<>();
    protected final Map<Long, Shipment> shipments = new LinkedHashMap<>();
    protected final Map<Long, List<TrackerEvent>> trackerEvents = new HashMap<>();

    /**
     * @throws Exception
     */
    public TrackerEventParser() throws Exception {
        super();
    }

    public void parseData(final URL shipmentsUrl, final URL eventsUrl)
            throws Exception {
        final Map<Long, Shipment> shipments = parseShipments(shipmentsUrl);
        this.shipments.putAll(shipments);

        //register lists for tracker events
        for (final Shipment s : shipments.values()) {
            trackerEvents.put(s.getId(), new LinkedList<TrackerEvent>());
        }

        final List<TrackerEvent> events = parseEvents(eventsUrl);
        addTrackerEvents(events);
    }

    /**
     * @param events
     */
    protected void addTrackerEvents(final List<TrackerEvent> events) {
        for (final TrackerEvent e : events) {
            final List<TrackerEvent> es = this.trackerEvents.get(e.getShipment().getId());
            es.add(e);
        }
    }
    /**
     * @return
     */
    private List<TrackerEvent> parseEvents(final URL eventsDataUrl) throws Exception {
        final String eventsData = getContent(eventsDataUrl);
        final List<TrackerEvent> events = new LinkedList<>();
        final DateFormat df = new SimpleDateFormat("\"yyyy-MM-dd HH:mm:ss\"");

        final String[] rows = eventsData.split("\n");
        for (int i = 1; i < rows.length; i++) {
            final String row = rows[i].trim();
            if (!row.isEmpty()) {
//                id,time,createdon,latitude,longitude,shipment,device
//                2780,"2016-01-10 05:54:50","2016-01-10 05:54:50",-33.8871,151.1647,198,354188048733088
                final String[] data = row.split(",");

                final TrackerEvent e = new TrackerEvent();
                //id
                e.setId(Long.parseLong(data[0]));
                //time
                e.setTime(df.parse(data[1]));
                //created on
                e.setCreatedOn(df.parse(data[2]));
                //latitude
                final String latitude = data[3];
                if (!latitude.equals("NULL")) {
                    e.setLatitude(Double.parseDouble(latitude));
                }
                //latitude
                final String longitude = data[4];
                if (!longitude.equals("NULL")) {
                    e.setLongitude(Double.parseDouble(longitude));
                }
                //shipment
                final long shipmentId = Long.parseLong(data[5]);
                e.setShipment(getShipmentForParsedShipmentId(shipmentId));
                //device
                final String imei = data[6];
                e.setDevice(getDevice(imei, true));

                events.add(e);
            }
        }
        return events;
    }
    protected List<Shipment> getShipments(final Set<Long> ids) {
        final List<Shipment> list = new LinkedList<>();
        for (final Shipment shipment : this.shipments.values()) {
            if (ids.contains(shipment.getId())) {
                list.add(shipment);
            }
        }
        return list;
    }
    /**
     * @param imei device IMEI.
     * @return
     */
    protected Device createDevice(final String imei) {
        final Device d = new Device();
        d.setImei(imei);
        d.setActive(true);
        d.setName("BufFix-" + imei);
        d.setDescription("Autogenerated device" + " " + imei + " for bug fix");
        d.setCompany(getCompany());
        return d;
    }
    protected Device getDevice(final String imei, final boolean create) {
        Device d = devices.get(imei);
        if (d == null && create) {
            d = createDevice(imei);
            devices.put(imei, d);
        }
        return d;
    }

    /**
     * @param shipmentId shipment ID from excel file. It can be not equals
     * by real existing shipment ID.
     * @return
     */
    protected Shipment getShipmentForParsedShipmentId(final long shipmentId) {
        return shipments.get(shipmentId);
    }
    /**
     * @return
     * @throws IOException
     */
    protected Map<Long, Shipment> parseShipments(final URL shipmentsDataUrl) throws Exception {
        final String shipmentsData = getContent(shipmentsDataUrl);

        final Map<Long, Shipment> shipments = new HashMap<>();
        final DateFormat df = new SimpleDateFormat("\"yyyy-MM-dd HH:mm:ss\"");

        final String[] rows = shipmentsData.split("\n");
        for (int i = 1; i < rows.length; i++) {
            final String row = rows[i].trim();
            if (!row.isEmpty()) {
//              id,device,tripcount,shipmentdate,status
//              198,354188048733088,29,"2016-03-08 17:32:48",Default
                final String[] data = row.split(",");

                final Shipment s = new Shipment();
                s.setCompany(getCompany());
                //id
                s.setId(Long.parseLong(data[0]));
                //device
                s.setDevice(getDevice(data[1], true));
                //trip count
                s.setTripCount(Integer.parseInt(data[2]));
                //shipment date
                s.setShipmentDate(df.parse(data[3]));
                //status
                final String status = data[4];
                if (!status.isEmpty()) {
                    s.setStatus(ShipmentStatus.valueOf(status));
                }

                shipments.put(s.getId(), s);
            }
        }
        return shipments;
    }
    /**
     * @param url
     * @return
     * @throws IOException
     */
    private String getContent(final URL url) throws IOException {
        final InputStream in = url.openStream();
        try {
            return StringUtils.getContent(in, "UTF-8");
        } finally {
            in.close();
        }
    }
    /**
     * @return
     */
    public abstract Company getCompany();
    /**
     * @return
     */
    public List<Shipment> getAllShipments() {
        return new LinkedList<>(shipments.values());
    }

    /**
     * @param shipment
     * @return
     */
    public List<TrackerEvent> getEvents(final Shipment shipment) {
        return new LinkedList<>(trackerEvents.get(shipment.getId()));
    }
}
